apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: retention-manager
  labels:
    {{- include "docker-registry.labels" . | nindent 4 }}
spec:
  suspend: false
  schedule: "0 * * * *"
  startingDeadlineSeconds: 60
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          volumes:
          {{- range .Values.configmaps }}
            {{- if eq .assignment "cronjob" }}
          - name: {{ .name }}
            configMap:
              name: {{ .name }}
              items:
                {{- range .data }}
                - key: {{ .filename }}
                  path: {{ .filename }}
                {{- end }}
            {{- end }}
          {{- end }}
          containers:
            - name: retention-manager
              image: jeffstephens/retention-manager:1.0.5
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: "200m"
                limits:
                  cpu: "256m"
              env:
                - name: CONFIG_PATH
                  value: /retention-manager/config.yaml
                - name: REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry
                      key: password
                - name: REGISTRY_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: registry
                      key: username
              volumeMounts:
              {{- range .Values.configmaps }}
                {{- if eq .assignment "cronjob" }}
                - name: {{ .name }}
                  {{- range .data }}
                  mountPath: {{ .mountPath }}
                  {{- end }}
                {{- end }}
              {{- end }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: garbage-collector
  labels:
    {{- include "docker-registry.labels" . | nindent 4 }}
spec:
  suspend: false
  schedule: "15 4 * * *"
  startingDeadlineSeconds: 60
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: garbage-collector
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              command: ["/bin/registry"]
              args: ["garbage-collect", "/etc/docker/registry/config.yml"]
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                - name: REGISTRY_AUTH
                  value: htpasswd
                - name: REGISTRY_AUTH_HTPASSWD_REALM
                  value: "Registry Realm"
                - name: REGISTRY_AUTH_HTPASSWD_PATH
                  value: "/auth/htpasswd"
                - name: REGISTRY_LOG_LEVEL
                  value: "debug"
                - name: REGISTRY_HTTP_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: registry
                      key: secret
                - name: REGISTRY_STORAGE
                  value: "s3"
                - name: REGISTRY_STORAGE_S3_REGION
                  value: "{{ .Values.aws.region }}"
                - name: REGISTRY_STORAGE_S3_BUCKET
                  value: "{{ .Values.aws.s3_bucket }}"
                - name: REGISTRY_STORAGE_S3_ACCESSKEY
                  valueFrom:
                    secretKeyRef:
                      name: aws
                      key: aws-key
                - name: REGISTRY_STORAGE_S3_SECRETKEY
                  valueFrom:
                    secretKeyRef:
                      name: aws
                      key: aws-secret
                - name: REGISTRY_STORAGE_DELETE_ENABLED
                  value: "true"
                - name: REGISTRY_REDIS_ADDR
                  value: "{{ .Release.name}}-{{ .Values.redis.address }}"
                - name: REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR
                  value: redis
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: redis
                      key: password
